# Generated by Django 3.1.6 on 2021-02-06 08:29

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import wsc_django.utils.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='手机号')),
                ('password', models.CharField(max_length=128, verbose_name='密码（密文）')),
                ('wx_unionid', models.CharField(max_length=64, verbose_name='微信unionid')),
                ('sex', models.SmallIntegerField(default=0, null=True, verbose_name='用户性别 0:未知 1:男 2:女')),
                ('nickname', models.CharField(default='', max_length=64, verbose_name='用户昵称')),
                ('realname', models.CharField(max_length=64, verbose_name='用户真姓名')),
                ('birthday', models.DateField(verbose_name='生日')),
                ('head_image_url', models.CharField(max_length=1024, verbose_name='用户头像URL')),
                ('wx_openid', models.CharField(max_length=64, verbose_name='微信openid')),
                ('wx_country', models.CharField(max_length=32, verbose_name='用户所在国家')),
                ('wx_province', models.CharField(max_length=32, verbose_name='用户所在省份')),
                ('wx_city', models.CharField(max_length=32, verbose_name='用户所在城市')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
            bases=(models.Model, wsc_django.utils.models.TimeBaseMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone'], name='ux_phone'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['wx_unionid'], name='ux_wx_unionid'),
        ),
    ]
